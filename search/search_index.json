{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#vhcalc","title":"vhcalc","text":"<p>It's a client-side library that implements a custom algorithm for extracting video hashes (fingerprints) from any video source.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>$ vhcalc --help\nUsage: vhcalc [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\nimghash*                   extracting and exporting binary video hashes\n                           (fingerprints) from any video source\nexport-imghash-from-media  extracting and exporting binary video hashes\n                           (fingerprints) from any video source\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>Docker hub: yoyonel/vhcalc</p> <pre><code>$ docker run -it yoyonel/vhcalc:main --help\nUsage: vhcalc [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\nimghash*                   extracting and exporting binary video hashes\n                           (fingerprints) from any video source\nexport-imghash-from-media  extracting and exporting binary video hashes\n                           (fingerprints) from any video source\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See Contributing</p>"},{"location":"#authors","title":"Authors","text":"<p>Lionel Atty yoyonel@hotmail.com</p> <p>Created from Lee-W/cookiecutter-python-template version 1.1.2</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#step-1-fork-this-repository-to-your-github","title":"Step 1. Fork this repository to your GitHub","text":""},{"location":"contributing/#step-2-clone-the-repository-from-your-github","title":"Step 2. Clone the repository from your GitHub","text":"<pre><code>git clone https://github.com/[YOUR GITHUB ACCOUNT]/vhcalc.git\n</code></pre>"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","title":"Step 3. Add this repository to the remote in your local repository","text":"<pre><code>git remote add upstream \"https://github.com/yoyonel/vhcalc\"\n</code></pre> <p>You can pull the latest code in main branch through <code>git pull upstream main</code> afterward.</p>"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","title":"Step 4. Check out a branch for your new feature","text":"<pre><code>git checkout -b [YOUR FEATURE]\n</code></pre>"},{"location":"contributing/#step-5-install-prerequisite","title":"Step 5. Install prerequisite","text":"<pre><code>python -m pip install pipx\npython -m pipx install poetry invoke\npython -m pipx ensurepath\n</code></pre> <ul> <li>pipx: for python tool management</li> <li>poetry: for dependency management</li> <li>invoke: for task management</li> </ul>"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","title":"Step 6. Create your local Python virtual environment and install dependencies","text":"<pre><code>inv env.init-dev\n</code></pre>"},{"location":"contributing/#step-7-work-on-your-new-feature","title":"Step 7. Work on your new feature","text":"<p>Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes.</p> <pre><code>inv git.commit\n</code></pre>"},{"location":"contributing/#step-8-run-test-cases","title":"Step 8. Run test cases","text":"<p>Make sure all test cases pass.</p> <pre><code>inv test\n</code></pre>"},{"location":"contributing/#step-9-run-test-coverage","title":"Step 9. Run test coverage","text":"<p>Check the test coverage and see where you can add test cases.</p> <pre><code>inv test.cov\n</code></pre>"},{"location":"contributing/#step-10-reformat-source-code","title":"Step 10. Reformat source code","text":"<p>Format your code through <code>black</code> and <code>isort</code>.</p> <pre><code>inv style.reformat\n</code></pre>"},{"location":"contributing/#step-11-run-style-check","title":"Step 11. Run style check","text":"<p>Make sure your coding style passes all enforced linters.</p> <pre><code>inv style\n</code></pre> <p>[Optional] Check your coding style through <code>pylint</code>. Note that you do not have to fix all the issues warned by <code>pylint</code>.</p> <pre><code>inv style.pylint\n</code></pre>"},{"location":"contributing/#step-12-run-security-check","title":"Step 12. Run security check","text":"<p>Ensure the packages installed are secure, and no server vulnerability is introduced</p> <pre><code>inv secure\n</code></pre>"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89","text":""}]}