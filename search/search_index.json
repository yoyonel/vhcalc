{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vhcalc It's a client-side library that implements a custom algorithm for extracting video hashes (fingerprints) from any video source. Getting Started Prerequisites Python Usage $ export_imghash_from_media --help Usage: export_imghash_from_media [OPTIONS] This script exporting binary images hashes (fingerprints) from (any) media (video file) Options: --version Show the version and exit. -r, --medias_pattern PATH-OR-GLOB Pattern to find medias [required] -o, --output-file PATH File where to write images hashes. --help Show this message and exit. Docker Docker hub: yoyonel/vhcalc $ docker run -it yoyonel/vhcalc:main --help Usage: export_imghash_from_media [OPTIONS] This script exporting binary images hashes (fingerprints) from (any) media (video file) Options: --version Show the version and exit. -r, --medias_pattern PATH-OR-GLOB Pattern to find medias [required] -o, --output-file PATH File where to write images hashes. --help Show this message and exit. Contributing See Contributing Authors Lionel Atty yoyonel@hotmail.com Created from Lee-W/cookiecutter-python-template version 1.1.2","title":"Home"},{"location":"#vhcalc","text":"It's a client-side library that implements a custom algorithm for extracting video hashes (fingerprints) from any video source.","title":"vhcalc"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#prerequisites","text":"Python","title":"Prerequisites"},{"location":"#usage","text":"$ export_imghash_from_media --help Usage: export_imghash_from_media [OPTIONS] This script exporting binary images hashes (fingerprints) from (any) media (video file) Options: --version Show the version and exit. -r, --medias_pattern PATH-OR-GLOB Pattern to find medias [required] -o, --output-file PATH File where to write images hashes. --help Show this message and exit.","title":"Usage"},{"location":"#docker","text":"Docker hub: yoyonel/vhcalc $ docker run -it yoyonel/vhcalc:main --help Usage: export_imghash_from_media [OPTIONS] This script exporting binary images hashes (fingerprints) from (any) media (video file) Options: --version Show the version and exit. -r, --medias_pattern PATH-OR-GLOB Pattern to find medias [required] -o, --output-file PATH File where to write images hashes. --help Show this message and exit.","title":"Docker"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#authors","text":"Lionel Atty yoyonel@hotmail.com Created from Lee-W/cookiecutter-python-template version 1.1.2","title":"Authors"},{"location":"contributing/","text":"Step 1. Fork this repository to your GitHub Step 2. Clone the repository from your GitHub git clone https://github.com/[YOUR GITHUB ACCOUNT]/vhcalc.git Step 3. Add this repository to the remote in your local repository git remote add upstream \"https://github.com/yoyonel/vhcalc\" You can pull the latest code in main branch through git pull upstream main afterward. Step 4. Check out a branch for your new feature git checkout -b [YOUR FEATURE] Step 5. Install prerequisite python -m pip install pipx python -m pipx install poetry invoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management Step 6. Create your local Python virtual environment and install dependencies inv env.init-dev Step 7. Work on your new feature Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit Step 8. Run test cases Make sure all test cases pass. inv test Step 9. Run test coverage Check the test coverage and see where you can add test cases. inv test.cov Step 10. Reformat source code Format your code through black and isort . inv style.reformat Step 11. Run style check Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint Step 12. Run security check Ensure the packages installed are secure, and no server vulnerability is introduced inv secure Step 13. Create a Pull Request and celebrate \ud83c\udf89","title":"Contributing"},{"location":"contributing/#step-1-fork-this-repository-to-your-github","text":"","title":"Step 1. Fork this repository to your GitHub"},{"location":"contributing/#step-2-clone-the-repository-from-your-github","text":"git clone https://github.com/[YOUR GITHUB ACCOUNT]/vhcalc.git","title":"Step 2. Clone the repository from your GitHub"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","text":"git remote add upstream \"https://github.com/yoyonel/vhcalc\" You can pull the latest code in main branch through git pull upstream main afterward.","title":"Step 3. Add this repository to the remote in your local repository"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","text":"git checkout -b [YOUR FEATURE]","title":"Step 4. Check out a branch for your new feature"},{"location":"contributing/#step-5-install-prerequisite","text":"python -m pip install pipx python -m pipx install poetry invoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management","title":"Step 5. Install prerequisite"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","text":"inv env.init-dev","title":"Step 6. Create your local Python virtual environment and install dependencies"},{"location":"contributing/#step-7-work-on-your-new-feature","text":"Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit","title":"Step 7. Work on your new feature"},{"location":"contributing/#step-8-run-test-cases","text":"Make sure all test cases pass. inv test","title":"Step 8. Run test cases"},{"location":"contributing/#step-9-run-test-coverage","text":"Check the test coverage and see where you can add test cases. inv test.cov","title":"Step 9. Run test coverage"},{"location":"contributing/#step-10-reformat-source-code","text":"Format your code through black and isort . inv style.reformat","title":"Step 10. Reformat source code"},{"location":"contributing/#step-11-run-style-check","text":"Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint","title":"Step 11. Run style check"},{"location":"contributing/#step-12-run-security-check","text":"Ensure the packages installed are secure, and no server vulnerability is introduced inv secure","title":"Step 12. Run security check"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","text":"","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89"}]}