{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#vhcalc","title":"vhcalc","text":"<p>It's a client-side library that implements a custom algorithm for extracting video hashes (fingerprints) from any video source.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>$ vhcalc --help\nUsage: vhcalc [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\nimghash*                   Compute image hashes from and to binaries stream\n                           (by default: stdin/out)\nexport-imghash-from-media  extracting and exporting binary video hashes\n                           (fingerprints) from any video source\n</code></pre>"},{"location":"#imghash-default-entrypoint","title":"<code>imghash</code> default entrypoint","text":"<pre><code>$ vhcalc imghash --help\nUsage: vhcalc imghash [OPTIONS] [INPUT_STREAM] [OUTPUT_STREAM]\n\n  Simple form of the application: Input filepath &gt; image hashes (to stdout by\n  default)\n\nOptions:\n  --image-hashing-method [AverageHashing|PerceptualHashing|PerceptualHashing_Simple|DifferenceHashing|WaveletHashing]\n                                  [default: PerceptualHashing]\n  --decompress\n  --from-url URL\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"#media-into-binary-images-hashes-fingerprints","title":"Media into binary images hashes (fingerprints)","text":"<pre><code># using pipes for input/output streams\n$ cat tests/data/big_buck_bunny_trailer_480p.mkv | \\\n  # input: binary data from video/media (readable by ffmpeg)\n  vhcalc imghash --image-hashing-method PerceptualHashing | \\\n  # output: binary representation of images hashes (to stdout)\n  hexdump | tail -n 8\nThe frame size for reading (32, 32) is different from the source frame size (854, 480).\n*\n0001900 93f5 6d91 926a 6585 d2f5 6d91 926a 6585\n0001910 92f5 6d91 9a6a 6585 92f5 6c91 9b6e 6485\n0001920 92d5 6d91 9a7a 6585 92d5 6591 9a6e e585\n0001930 d2d5 6591 9a6a e585 d2d5 2c91 9b6e e485\n0001940 d2d5 6d91 926e e581 d2d5 6d91 d26e e181\n0001950 d6d5 b581 c26e f181 d5d5 d52a d528 d528\n0001960\n</code></pre>"},{"location":"#media-to-hexadecimal-representation-of-images-hashes-fingerprints","title":"Media to hexadecimal representation of images hashes (fingerprints)","text":"<pre><code>$ cat tests/data/big_buck_bunny_trailer_480p.mkv | \\\n    # input: binary data from video/media (readable by ffmpeg)\n    vhcalc imghash --image-hashing-method PerceptualHashing | \\\n    # output/input: binary images hashes (through pipe stream)\n    vhcalc imghash --decompress | \\\n    # output: string hexadecimal representation of images hashes (to stdout)\n    fold -w 16 | tail -n 8\nThe frame size for reading (32, 32) is different from the source frame size (854, 480).\nd592916d7a9a8565\nd59291656e9a85e5\nd5d291656a9a85e5\nd5d2912c6e9b85e4\nd5d2916d6e9281e5\nd5d2916d6ed281e1\nd5d681b56ec281f1\nd5d52ad528d528d5%\n</code></pre>"},{"location":"#from-url","title":"From URL","text":"<pre><code>  # launching (in background) a webserver deserving `tests/data` files\n$ python3 -m http.server -d tests/data &amp; \\\n  # input: url to tests/data video serving by http server\n  vhcalc --from-url http://0.0.0.0:8000/big_buck_bunny_trailer_480p.mkv | \\\n  # output/input: binary images hashes (through pipe stream)\n  vhcalc --decompress | \\\n  # output: string hexadecimal representation of images hashes (to stdout)\n  fold -w 16 | tail -n 8; \\\n  # killing the http server launch at the beginning\n  ps -ef | grep http.server | grep tests/data | grep -v grep | awk '{print $2}' | xargs kill\n[1] 2217597\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n127.0.0.1 - - [12/Sep/2024 16:36:44] \"GET /big_buck_bunny_trailer_480p.mkv HTTP/1.1\" 200 -\nThe frame size for reading (32, 32) is different from the source frame size (854, 480).\nd592916d7a9a8565\nd59291656e9a85e5\nd5d291656a9a85e5\nd5d2912c6e9b85e4\nd5d2916d6e9281e5\nd5d2916d6ed281e1\nd5d681b56ec281f1\nd5d52ad528d528d5%\n[1]  + 2217597 terminated  python3 -m http.server -d tests/data\n</code></pre>"},{"location":"#from-youtube-video","title":"From YouTube video","text":"<p>Requirement: yt-dlp - A feature-rich command-line audio/video downloader</p> <pre><code>  # input: Youtube url grab by yt-dlp tool\n$ vhcalc --from-url $(yt-dlp --youtube-skip-dash-manifest -g https://www.youtube.com/watch?v=W6QOj6vWmoQ | head -n 1) | \\\n  # output/input: binary images hashes (through pipe stream)\n  vhcalc --decompress | \\\n  # output: string hexadecimal representation of images hashes (to stdout)\n  fold -w 16 | tail -n 8;\nThe frame size for reading (32, 32) is different from the source frame size (606, 1080).\n8adaf123841eb379\n8adaf123841eb379\n8283bb72f46ce871\n8283bb72f46ce871\n8283bb72f46ce871\n8283bb72f46ce871\n8283bb72f46ce871\n8283bb72f46ce871%  \n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>Docker hub: yoyonel/vhcalc</p> <pre><code>$ docker run -it yoyonel/vhcalc:latest --help\nUsage: vhcalc [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\nimghash*                   Compute image hashes from and to binaries stream\n                           (by default: stdin/out)\nexport-imghash-from-media  extracting and exporting binary video hashes\n                           (fingerprints) from any video source\n</code></pre> <pre><code># with '-i' docker run option, we can use (host) pipes from stdin to stdout (for example)\n$ cat tests/data/big_buck_bunny_trailer_480p.mkv | docker run -i --rm yoyonel/vhcalc:latest | md5sum\nThe frame size for reading (32, 32) is different from the source frame size (854, 480).\nbf5c7468df01d78862c847596de92ff3  -\n\n# using HTTP server and url input\n$ python3 -m http.server -d tests/data &amp; \\\n  # input: url to tests/data video serving by http server\n  docker run -i --network host yoyonel/vhcalc --from-url http://0.0.0.0:8000/big_buck_bunny_trailer_480p.mkv | \\\n  # output/input: binary images hashes (through pipe stream)\n  docker run -i yoyonel/vhcalc --decompress | \\\n  # output: string hexadecimal representation of images hashes (to stdout)\n  fold -w 16 | tail -n 8; \\\n  # killing the http server launch at the beginning\n  ps -ef | grep http.server | grep tests/data | grep -v grep | awk '{print $2}' | xargs kill\n[1] 1929365\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n127.0.0.1 - - [13/Sep/2024 14:59:04] \"GET /big_buck_bunny_trailer_480p.mkv HTTP/1.1\" 200 -\nThe frame size for reading (32, 32) is different from the source frame size (854, 480).\nd592916d7a9a8565\nd59291656e9a85e5\nd5d291656a9a85e5\nd5d2912c6e9b85e4\nd5d2916d6e9281e5\nd5d2916d6ed281e1\nd5d681b56ec281f1\nd5d52ad528d528d5%\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See Contributing</p>"},{"location":"#authors","title":"Authors","text":"<p>Lionel Atty yoyonel@hotmail.com</p> <p>Created from Lee-W/cookiecutter-python-template version 1.1.2</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#step-1-fork-this-repository-to-your-github","title":"Step 1. Fork this repository to your GitHub","text":""},{"location":"contributing/#step-2-clone-the-repository-from-your-github","title":"Step 2. Clone the repository from your GitHub","text":"<pre><code>git clone https://github.com/[YOUR GITHUB ACCOUNT]/vhcalc.git\n</code></pre>"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","title":"Step 3. Add this repository to the remote in your local repository","text":"<pre><code>git remote add upstream \"https://github.com/yoyonel/vhcalc\"\n</code></pre> <p>You can pull the latest code in main branch through <code>git pull upstream main</code> afterward.</p>"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","title":"Step 4. Check out a branch for your new feature","text":"<pre><code>git checkout -b [YOUR FEATURE]\n</code></pre>"},{"location":"contributing/#step-5-install-prerequisite","title":"Step 5. Install prerequisite","text":"<pre><code>python -m pip install pipx\npython -m pipx install poetry invoke\npython -m pipx ensurepath\n</code></pre> <ul> <li>pipx: for python tool management</li> <li>poetry: for dependency management</li> <li>invoke: for task management</li> </ul>"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","title":"Step 6. Create your local Python virtual environment and install dependencies","text":"<pre><code>inv env.init-dev\n</code></pre>"},{"location":"contributing/#step-7-work-on-your-new-feature","title":"Step 7. Work on your new feature","text":"<p>Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes.</p> <pre><code>inv git.commit\n</code></pre>"},{"location":"contributing/#step-8-run-test-cases","title":"Step 8. Run test cases","text":"<p>Make sure all test cases pass.</p> <pre><code>inv test\n</code></pre>"},{"location":"contributing/#step-9-run-test-coverage","title":"Step 9. Run test coverage","text":"<p>Check the test coverage and see where you can add test cases.</p> <pre><code>inv test.cov\n</code></pre>"},{"location":"contributing/#step-10-reformat-source-code","title":"Step 10. Reformat source code","text":"<p>Format your code through <code>black</code> and <code>isort</code>.</p> <pre><code>inv style.reformat\n</code></pre>"},{"location":"contributing/#step-11-run-style-check","title":"Step 11. Run style check","text":"<p>Make sure your coding style passes all enforced linters.</p> <pre><code>inv style\n</code></pre> <p>[Optional] Check your coding style through <code>pylint</code>. Note that you do not have to fix all the issues warned by <code>pylint</code>.</p> <pre><code>inv style.pylint\n</code></pre>"},{"location":"contributing/#step-12-run-security-check","title":"Step 12. Run security check","text":"<p>Ensure the packages installed are secure, and no server vulnerability is introduced</p> <pre><code>inv secure\n</code></pre>"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89","text":""}]}