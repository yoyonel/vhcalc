[tool.commitizen]
name = "cz_conventional_commits"
version = "0.7.0"
tag_format = "$version"
version_files = [
    "pyproject.toml:version"
]


[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''


[tool.isort]
profile = "black"


[tool.pylint]
    [tool.pylint.messages_control]
    disable = [
        "bad-continuation",
        "missing-function-docstring",
        "missing-module-docstring",
        "invalid-name"
    ]

    [tool.pylint.format]
    max-line-length = 88


[tool.mypy]
exclude = '''(?x)(
    ^vhcalc/tools/forked               # all files named in "vhcalc/tools/forked/" directory
    | ^vhcalc/tools/version_extended_informations\.py$  # ignore[attr-defined] raise only in 3.9
)'''
files = [
    "vhcalc",
    "tests"
]
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
[[tool.mypy.overrides]]
    module = ["vhcalc.*"]
    # Ensure full coverage
    disallow_untyped_calls = true
    disallow_untyped_defs = true
    disallow_incomplete_defs = true
    disallow_untyped_decorators = true
    # Restrict dynamic typing
    disallow_any_generics = true
    disallow_subclassing_any = true
    warn_return_any = true

    [[tool.mypy.overrides]]
    module = ["tests.*"]
    disallow_untyped_defs = false
    disallow_untyped_decorators = false


[tool.pytest.ini_options]
minversion = "6.0"
testpaths = "tests vhcalc"
addopts = "--strict-markers --doctest-modules"
norecursedirs = [
    ".*",
    "build",
    "dist",
    "CVS",
    "_darcs",
    "{arch}",
    "*.egg",
    "venv",
    "env",
    "virtualenv"
]

[tool.coverage]
    [tool.coverage.report]
    show_missing = true
    exclude_lines = [
        # Have to re-enable the standard pragma
        'pragma: no cover',

        # Don't complain about missing debug-only code:
        'def __repr__',
        'if self\.debug',

        # Don't complain if tests don't hit defensive assertion code:
        'raise AssertionError',
        'raise NotImplementedError',

        # Don't complain if non-runnable code isn't run:
        'if 0:',
        'if __name__ == .__main__.:'
    ]
    omit = [
        'env/*',
        'venv/*',
        '*/virtualenv/*',
        '*/virtualenvs/*',
        '*/tests/*',
        '*/tools/forked/*'
    ]
    [tool.coverage.run]
    relative_files = true

[tool.poetry]
name = "vhcalc"
version = "0.7.0"
authors = ["Lionel Atty <yoyonel@hotmail.com>"]
description = "It's a client-side library that implements a custom algorithm for extracting video hashes (fingerprints) from any video source."
license = "MIT license"
readme = "docs/README.md"
repository = "https://github.com/yoyonel/vhcalc"

[tool.poetry.dependencies]
python = "^3.9"

# CLI
click = "^8.1.7"
click-pathlib = "^2020.3.13"
rich = "^13.8.0"
rich-click = "^1.8.3"
#click-path = "0.0.5"   # '[IndexError] list index out of range' on poetry install
typeguard = "^4.3.0"
loguru = "^0.7.2"
colorama = "^0.4.6"

# Processing
numpy = "^2.0.2"
Distance = "^0.1.3"
bitstring = "^4.2.3"
ImageHash = "^4.3.1"
Pillow = ">=9.1.1"
imageio-ffmpeg = "^0.5.1"

types-setuptools = "^74.0.0.20240830"

[tool.poetry.dev-dependencies]
# task management
invoke = "^2.2.0"
# test
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.1"
hypothesis = "^6.111.2"
coverage = {extras = ["toml"], version = "^7.6.1"}
# style
flake8 = "^7.1.1"
pylint = "^3.2.6"
mypy = "^1.11.2"
black = "^24.8.0"
isort = "^5.13.2"
# security
bandit = "^1.7.9"
safety = "^2.3.5"   # doesn't work with "^3.0.0"
# git
commitizen = "^2.4.0"
pre-commit = "^2.2.0"
# documentation
mkdocs = "^1.1"
mkdocs-material = "^9.1.13"
pytest-click = "^1.1.0"
mkdocs-git-revision-date-localized-plugin = "^1.0.1"
mkdocs-minify-plugin = "^0.8.0"
mkdocs-video = "^1.3.0"
#mkdocs-click = "^0.7.0"
# tox
tox = "^4.8.0"

[tool.poetry.scripts]
export_imghash_from_media = "vhcalc.app:export_imghash_from_media"
vhcalc = "vhcalc.app:cli"

[tool.poetry.group.dev.dependencies]
pytest-localftpserver = "^1.3.2"

[build-system]
requires = ["poetry>=1.0.0", "poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
